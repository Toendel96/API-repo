/**
 * Petter's forked version of FilipÂ´s API of Things
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.ErrorResponse
import io.swagger.client.model.PatchThingRequest
import io.swagger.client.model.PostThingRequest
import io.swagger.client.model.Thing
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * Description goes HERE  DNB naming convention: Root resource of API &#x3D; Name of API. Example: http://api.dnb.no/v1/accounts/ &#x3D; Accounts API 
   * 
   * Expected answers:
   *   code 200 : Seq[Thing] (Success)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param xDNBAPICustomHeader2 Optional custom header described
   * @param field1 Query string parameter to narrow the list of things based on field1 value.
   */
  def thingsGet(xDNBAPITraceId: String, xDNBAPICustomHeader: String, xDNBAPICustomHeader2: Option[String] = None, field1: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[Thing]] =
    ApiRequest[Seq[Thing]](ApiMethods.GET, "https://apis.dnb.no/v1", "/things", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("field1", field1)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Seq[Thing]](200)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsGetHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }
  /**
   * Description goes HERE 
   * 
   * Expected answers:
   *   code 201 : Thing (Successfully created.  Returns the newly created Thing. )
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param xDNBAPICustomHeader2 Optional custom header described
   * @param body Description goes HERE
   */
  def thingsPost(xDNBAPITraceId: String, xDNBAPICustomHeader: String, xDNBAPICustomHeader2: Option[String] = None, body: Option[PostThingRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Thing] =
    ApiRequest[Thing](ApiMethods.POST, "https://apis.dnb.no/v1", "/things", "application/json")
      .withCredentials(basicAuth)
      .withBody(body)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Thing](201)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsPostHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }
  /**
   * Description goes HERE 
   * 
   * Expected answers:
   *   code 204 :  (Successfully deleted.  Alternatively: if the use case requires some information to be returned on delete. Use HTTP 200 and include a response payload as needed. )
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param thingId ID defining a specific Thing.
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param xDNBAPICustomHeader2 Optional custom header described
   */
  def thingsThingIdDelete(thingId: String, xDNBAPITraceId: String, xDNBAPICustomHeader: String, xDNBAPICustomHeader2: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://apis.dnb.no/v1", "/things/{thingId}", "application/json")
      .withCredentials(basicAuth)
      .withPathParam("thingId", thingId)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsThingIdDeleteHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }
  /**
   * Description goes HERE 
   * 
   * Expected answers:
   *   code 200 : Thing (Success )
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param thingId ID defining a specific Thing.
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param xDNBAPICustomHeader2 Optional custom header described
   */
  def thingsThingIdGet(thingId: String, xDNBAPITraceId: String, xDNBAPICustomHeader: String, xDNBAPICustomHeader2: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Thing] =
    ApiRequest[Thing](ApiMethods.GET, "https://apis.dnb.no/v1", "/things/{thingId}", "application/json")
      .withCredentials(basicAuth)
      .withPathParam("thingId", thingId)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Thing](200)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsThingIdGetHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }
  /**
   * Description goes HERE 
   * 
   * Expected answers:
   *   code 200 : Thing (Successfully updated.  Returns the updated Thing. )
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param thingId ID defining a specific Thing.
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param xDNBAPICustomHeader2 Optional custom header described
   * @param body Description goes HERE
   */
  def thingsThingIdPatch(thingId: String, xDNBAPITraceId: String, xDNBAPICustomHeader: String, xDNBAPICustomHeader2: Option[String] = None, body: Option[PatchThingRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Thing] =
    ApiRequest[Thing](ApiMethods.PATCH, "https://apis.dnb.no/v1", "/things/{thingId}", "application/json")
      .withCredentials(basicAuth)
      .withBody(body)
      .withPathParam("thingId", thingId)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Thing](200)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsThingIdPatchHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }
  /**
   * Description goes HERE 
   * 
   * Expected answers:
   *   code 200 : Thing (Success )
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 400 : ErrorResponse (Bad Request)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   *   code 500 : ErrorResponse (Internal server error)
   *              Headers :
   *                X-DNBAPI-Trace-Id - 
   * 
   * Available security schemes:
   *   basic (basic)
   * 
   * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.
   * @param xDNBAPICustomHeader Required custom header described
   * @param thingId ID defining a specific Thing.
   * @param xDNBAPICustomHeader2 Optional custom header described
   */
  def thingsThingIdSpecialThingGet(xDNBAPITraceId: String, xDNBAPICustomHeader: String, thingId: String, xDNBAPICustomHeader2: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Thing] =
    ApiRequest[Thing](ApiMethods.GET, "https://apis.dnb.no/v1", "/things/{thingId}/special-thing", "application/json")
      .withCredentials(basicAuth)
      .withPathParam("thingId", thingId)
      .withHeaderParam("X-DNBAPI-Trace-Id", xDNBAPITraceId)
      .withHeaderParam("X-DNBAPI-CustomHeader", xDNBAPICustomHeader)
      .withHeaderParam("X-DNBAPI-CustomHeader2", xDNBAPICustomHeader2)
      .withSuccessResponse[Thing](200)
      .withErrorResponse[ErrorResponse](400)
      .withErrorResponse[ErrorResponse](500)
      
  object ThingsThingIdSpecialThingGetHeaders { 
    def xDNBAPITraceId(r: ApiReturnWithHeaders) = r.getStringHeader("X-DNBAPI-Trace-Id")
  }


}


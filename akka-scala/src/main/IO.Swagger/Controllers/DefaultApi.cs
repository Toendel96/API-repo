/*
 * Petter's forked version of FilipÂ´s API of Things
 *
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Short summary of the API Operation: ex: Get all things
        /// </summary>
        /// <remarks>Description goes HERE  DNB naming convention: Root resource of API &#x3D; Name of API. Example: http://api.dnb.no/v1/accounts/ &#x3D; Accounts API </remarks>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <param name="field1">Query string parameter to narrow the list of things based on field1 value.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/v1/things")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Thing>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsGet([FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromHeader]string xDNBAPICustomHeader2, [FromQuery]string field1)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Thing>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Thing>>(exampleJson)
            : default(List<Thing>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Short summary of the API Operation: ex: Create one thing
        /// </summary>
        /// <remarks>Description goes HERE </remarks>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <param name="body">Description goes HERE</param>
        /// <response code="201">Successfully created.  Returns the newly created Thing. </response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/v1/things")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Thing), description: "Successfully created.  Returns the newly created Thing. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsPost([FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromHeader]string xDNBAPICustomHeader2, [FromBody]PostThingRequest body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Thing));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Thing>(exampleJson)
            : default(Thing);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Short summary of the API Operation: ex: Delete one thing by objectId
        /// </summary>
        /// <remarks>Description goes HERE </remarks>
        /// <param name="thingId">ID defining a specific Thing.</param>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <response code="204">Successfully deleted.  Alternatively: if the use case requires some information to be returned on delete. Use HTTP 200 and include a response payload as needed. </response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/v1/things/{thingId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsThingIdDelete([FromRoute][Required]string thingId, [FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromHeader]string xDNBAPICustomHeader2)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Short summary of the API Operation: ex: Get one thing by objectId
        /// </summary>
        /// <remarks>Description goes HERE </remarks>
        /// <param name="thingId">ID defining a specific Thing.</param>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <response code="200">Success </response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/v1/things/{thingId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Thing), description: "Success ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsThingIdGet([FromRoute][Required]string thingId, [FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromHeader]string xDNBAPICustomHeader2)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Thing));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Thing>(exampleJson)
            : default(Thing);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Short summary of the API Operation: ex: Update one thing by objectId
        /// </summary>
        /// <remarks>Description goes HERE </remarks>
        /// <param name="thingId">ID defining a specific Thing.</param>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <param name="body">Description goes HERE</param>
        /// <response code="200">Successfully updated.  Returns the updated Thing. </response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpPatch]
        [Route("/v1/things/{thingId}")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingIdPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(Thing), description: "Successfully updated.  Returns the updated Thing. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsThingIdPatch([FromRoute][Required]string thingId, [FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromHeader]string xDNBAPICustomHeader2, [FromBody]PatchThingRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Thing));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Thing>(exampleJson)
            : default(Thing);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Short summary of the API Operation: ex: Get one thing by objectId
        /// </summary>
        /// <remarks>Description goes HERE </remarks>
        /// <param name="xDNBAPITraceId">UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.</param>
        /// <param name="xDNBAPICustomHeader">Required custom header described</param>
        /// <param name="thingId">ID defining a specific Thing.</param>
        /// <param name="xDNBAPICustomHeader2">Optional custom header described</param>
        /// <response code="200">Success </response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/v1/things/{thingId}/special-thing")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ThingsThingIdSpecialThingGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Thing), description: "Success ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server error")]
        public virtual IActionResult ThingsThingIdSpecialThingGet([FromHeader][Required()][RegularExpression("/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/")][StringLength(36, MinimumLength=36)string xDNBAPITraceId, [FromHeader][Required()]string xDNBAPICustomHeader, [FromRoute][Required]string thingId, [FromHeader]string xDNBAPICustomHeader2)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Thing));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Thing>(exampleJson)
            : default(Thing);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

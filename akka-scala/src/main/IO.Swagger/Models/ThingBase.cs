/*
 * Petter's forked version of FilipÂ´s API of Things
 *
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The ThingBase object represents a common set of fields that are used in other objects. The base object itself is not meant to be returned from the API. 
    /// </summary>
    [DataContract]
    public partial class ThingBase : IEquatable<ThingBase>
    { 
        /// <summary>
        /// Description of field goes HERE
        /// </summary>
        /// <value>Description of field goes HERE</value>
        [DataMember(Name="field1")]
        public string Field1 { get; set; }

        /// <summary>
        /// Description of field goes HERE
        /// </summary>
        /// <value>Description of field goes HERE</value>
        [DataMember(Name="field2")]
        public int? Field2 { get; set; }

        /// <summary>
        /// Description of field goes HERE
        /// </summary>
        /// <value>Description of field goes HERE</value>
        [DataMember(Name="field3")]
        public decimal? Field3 { get; set; }

        /// <summary>
        /// Description of field goes HERE
        /// </summary>
        /// <value>Description of field goes HERE</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum Field4Enum
        {
            
            /// <summary>
            /// Enum VAL1Enum for VAL1
            /// </summary>
            [EnumMember(Value = "VAL1")]
            VAL1Enum = 1,
            
            /// <summary>
            /// Enum VAL2Enum for VAL2
            /// </summary>
            [EnumMember(Value = "VAL2")]
            VAL2Enum = 2,
            
            /// <summary>
            /// Enum VAL3Enum for VAL3
            /// </summary>
            [EnumMember(Value = "VAL3")]
            VAL3Enum = 3
        }

        /// <summary>
        /// Description of field goes HERE
        /// </summary>
        /// <value>Description of field goes HERE</value>
        [DataMember(Name="field4")]
        public Field4Enum? Field4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThingBase {\n");
            sb.Append("  Field1: ").Append(Field1).Append("\n");
            sb.Append("  Field2: ").Append(Field2).Append("\n");
            sb.Append("  Field3: ").Append(Field3).Append("\n");
            sb.Append("  Field4: ").Append(Field4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ThingBase)obj);
        }

        /// <summary>
        /// Returns true if ThingBase instances are equal
        /// </summary>
        /// <param name="other">Instance of ThingBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThingBase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Field1 == other.Field1 ||
                    Field1 != null &&
                    Field1.Equals(other.Field1)
                ) && 
                (
                    Field2 == other.Field2 ||
                    Field2 != null &&
                    Field2.Equals(other.Field2)
                ) && 
                (
                    Field3 == other.Field3 ||
                    Field3 != null &&
                    Field3.Equals(other.Field3)
                ) && 
                (
                    Field4 == other.Field4 ||
                    Field4 != null &&
                    Field4.Equals(other.Field4)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Field1 != null)
                    hashCode = hashCode * 59 + Field1.GetHashCode();
                    if (Field2 != null)
                    hashCode = hashCode * 59 + Field2.GetHashCode();
                    if (Field3 != null)
                    hashCode = hashCode * 59 + Field3.GetHashCode();
                    if (Field4 != null)
                    hashCode = hashCode * 59 + Field4.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ThingBase left, ThingBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ThingBase left, ThingBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

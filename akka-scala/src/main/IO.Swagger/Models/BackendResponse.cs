/*
 * Petter's forked version of FilipÂ´s API of Things
 *
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Error information from the backend system consumed by the service providing this API. 
    /// </summary>
    [DataContract]
    public partial class BackendResponse : IEquatable<BackendResponse>
    { 
        /// <summary>
        /// URL of endpoint giving the error
        /// </summary>
        /// <value>URL of endpoint giving the error</value>
        [DataMember(Name="endPointUrl")]
        public string EndPointUrl { get; set; }

        /// <summary>
        /// Error code of backend system
        /// </summary>
        /// <value>Error code of backend system</value>
        [DataMember(Name="statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// Descriptive message to complemented the (sometime cryptic) backend error code.
        /// </summary>
        /// <value>Descriptive message to complemented the (sometime cryptic) backend error code.</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackendResponse {\n");
            sb.Append("  EndPointUrl: ").Append(EndPointUrl).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BackendResponse)obj);
        }

        /// <summary>
        /// Returns true if BackendResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BackendResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackendResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndPointUrl == other.EndPointUrl ||
                    EndPointUrl != null &&
                    EndPointUrl.Equals(other.EndPointUrl)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndPointUrl != null)
                    hashCode = hashCode * 59 + EndPointUrl.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BackendResponse left, BackendResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BackendResponse left, BackendResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

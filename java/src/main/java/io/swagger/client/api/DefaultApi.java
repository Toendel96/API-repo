/*
 * FilipÂ´s API of Things
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.PatchThingRequest;
import io.swagger.client.model.PostThingRequest;
import io.swagger.client.model.Thing;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for thingsGet
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param field1 Query string parameter to narrow the list of things based on field1 value. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsGetCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, String field1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (field1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("field1", field1));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsGetValidateBeforeCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, String field1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsGet(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsGetCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, field1, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Get all things
     * Description goes HERE  DNB naming convention: Root resource of API &#x3D; Name of API. Example: http://api.dnb.no/v1/accounts/ &#x3D; Accounts API 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param field1 Query string parameter to narrow the list of things based on field1 value. (optional)
     * @return List&lt;Thing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Thing> thingsGet(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, String field1) throws ApiException {
        ApiResponse<List<Thing>> resp = thingsGetWithHttpInfo(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, field1);
        return resp.getData();
    }

    /**
     * Short summary of the API Operation: ex: Get all things
     * Description goes HERE  DNB naming convention: Root resource of API &#x3D; Name of API. Example: http://api.dnb.no/v1/accounts/ &#x3D; Accounts API 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param field1 Query string parameter to narrow the list of things based on field1 value. (optional)
     * @return ApiResponse&lt;List&lt;Thing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Thing>> thingsGetWithHttpInfo(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, String field1) throws ApiException {
        com.squareup.okhttp.Call call = thingsGetValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, field1, null, null);
        Type localVarReturnType = new TypeToken<List<Thing>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Short summary of the API Operation: ex: Get all things (asynchronously)
     * Description goes HERE  DNB naming convention: Root resource of API &#x3D; Name of API. Example: http://api.dnb.no/v1/accounts/ &#x3D; Accounts API 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param field1 Query string parameter to narrow the list of things based on field1 value. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsGetAsync(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, String field1, final ApiCallback<List<Thing>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsGetValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, field1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Thing>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for thingsPost
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsPostCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PostThingRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/things";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsPostValidateBeforeCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PostThingRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsPost(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsPostCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Create one thing
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @return Thing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Thing thingsPost(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PostThingRequest body) throws ApiException {
        ApiResponse<Thing> resp = thingsPostWithHttpInfo(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body);
        return resp.getData();
    }

    /**
     * Short summary of the API Operation: ex: Create one thing
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @return ApiResponse&lt;Thing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Thing> thingsPostWithHttpInfo(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PostThingRequest body) throws ApiException {
        com.squareup.okhttp.Call call = thingsPostValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, null, null);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Short summary of the API Operation: ex: Create one thing (asynchronously)
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsPostAsync(String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PostThingRequest body, final ApiCallback<Thing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsPostValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for thingsThingIdDelete
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdDeleteCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things/{thingId}"
            .replaceAll("\\{" + "thingId" + "\\}", apiClient.escapeString(thingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsThingIdDeleteValidateBeforeCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thingId' is set
        if (thingId == null) {
            throw new ApiException("Missing the required parameter 'thingId' when calling thingsThingIdDelete(Async)");
        }
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsThingIdDelete(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsThingIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsThingIdDeleteCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Delete one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void thingsThingIdDelete(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2) throws ApiException {
        thingsThingIdDeleteWithHttpInfo(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2);
    }

    /**
     * Short summary of the API Operation: ex: Delete one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> thingsThingIdDeleteWithHttpInfo(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2) throws ApiException {
        com.squareup.okhttp.Call call = thingsThingIdDeleteValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, null, null);
        return apiClient.execute(call);
    }

    /**
     * Short summary of the API Operation: ex: Delete one thing by objectId (asynchronously)
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdDeleteAsync(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsThingIdDeleteValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for thingsThingIdGet
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdGetCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things/{thingId}"
            .replaceAll("\\{" + "thingId" + "\\}", apiClient.escapeString(thingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsThingIdGetValidateBeforeCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thingId' is set
        if (thingId == null) {
            throw new ApiException("Missing the required parameter 'thingId' when calling thingsThingIdGet(Async)");
        }
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsThingIdGet(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsThingIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsThingIdGetCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @return Thing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Thing thingsThingIdGet(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2) throws ApiException {
        ApiResponse<Thing> resp = thingsThingIdGetWithHttpInfo(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2);
        return resp.getData();
    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @return ApiResponse&lt;Thing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Thing> thingsThingIdGetWithHttpInfo(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2) throws ApiException {
        com.squareup.okhttp.Call call = thingsThingIdGetValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, null, null);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId (asynchronously)
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdGetAsync(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, final ApiCallback<Thing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsThingIdGetValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for thingsThingIdPatch
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdPatchCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PatchThingRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/things/{thingId}"
            .replaceAll("\\{" + "thingId" + "\\}", apiClient.escapeString(thingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsThingIdPatchValidateBeforeCall(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PatchThingRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thingId' is set
        if (thingId == null) {
            throw new ApiException("Missing the required parameter 'thingId' when calling thingsThingIdPatch(Async)");
        }
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsThingIdPatch(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsThingIdPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsThingIdPatchCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Update one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @return Thing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Thing thingsThingIdPatch(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PatchThingRequest body) throws ApiException {
        ApiResponse<Thing> resp = thingsThingIdPatchWithHttpInfo(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body);
        return resp.getData();
    }

    /**
     * Short summary of the API Operation: ex: Update one thing by objectId
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @return ApiResponse&lt;Thing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Thing> thingsThingIdPatchWithHttpInfo(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PatchThingRequest body) throws ApiException {
        com.squareup.okhttp.Call call = thingsThingIdPatchValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, null, null);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Short summary of the API Operation: ex: Update one thing by objectId (asynchronously)
     * Description goes HERE 
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param body Description goes HERE (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdPatchAsync(String thingId, String xDNBAPITraceId, String xDNBAPICustomHeader, String xDNBAPICustomHeader2, PatchThingRequest body, final ApiCallback<Thing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsThingIdPatchValidateBeforeCall(thingId, xDNBAPITraceId, xDNBAPICustomHeader, xDNBAPICustomHeader2, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for thingsThingIdSpecialThingGet
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdSpecialThingGetCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String thingId, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things/{thingId}/special-thing"
            .replaceAll("\\{" + "thingId" + "\\}", apiClient.escapeString(thingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xDNBAPITraceId != null)
        localVarHeaderParams.put("X-DNBAPI-Trace-Id", apiClient.parameterToString(xDNBAPITraceId));
        if (xDNBAPICustomHeader != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader", apiClient.parameterToString(xDNBAPICustomHeader));
        if (xDNBAPICustomHeader2 != null)
        localVarHeaderParams.put("X-DNBAPI-CustomHeader2", apiClient.parameterToString(xDNBAPICustomHeader2));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call thingsThingIdSpecialThingGetValidateBeforeCall(String xDNBAPITraceId, String xDNBAPICustomHeader, String thingId, String xDNBAPICustomHeader2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xDNBAPITraceId' is set
        if (xDNBAPITraceId == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPITraceId' when calling thingsThingIdSpecialThingGet(Async)");
        }
        
        // verify the required parameter 'xDNBAPICustomHeader' is set
        if (xDNBAPICustomHeader == null) {
            throw new ApiException("Missing the required parameter 'xDNBAPICustomHeader' when calling thingsThingIdSpecialThingGet(Async)");
        }
        
        // verify the required parameter 'thingId' is set
        if (thingId == null) {
            throw new ApiException("Missing the required parameter 'thingId' when calling thingsThingIdSpecialThingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = thingsThingIdSpecialThingGetCall(xDNBAPITraceId, xDNBAPICustomHeader, thingId, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @return Thing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Thing thingsThingIdSpecialThingGet(String xDNBAPITraceId, String xDNBAPICustomHeader, String thingId, String xDNBAPICustomHeader2) throws ApiException {
        ApiResponse<Thing> resp = thingsThingIdSpecialThingGetWithHttpInfo(xDNBAPITraceId, xDNBAPICustomHeader, thingId, xDNBAPICustomHeader2);
        return resp.getData();
    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @return ApiResponse&lt;Thing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Thing> thingsThingIdSpecialThingGetWithHttpInfo(String xDNBAPITraceId, String xDNBAPICustomHeader, String thingId, String xDNBAPICustomHeader2) throws ApiException {
        com.squareup.okhttp.Call call = thingsThingIdSpecialThingGetValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, thingId, xDNBAPICustomHeader2, null, null);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Short summary of the API Operation: ex: Get one thing by objectId (asynchronously)
     * Description goes HERE 
     * @param xDNBAPITraceId UUID (Universally Unique Identifier) version 4  Custom correlation-id to be able to correlate request / response. By logging this value on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests. (required)
     * @param xDNBAPICustomHeader Required custom header described (required)
     * @param thingId ID defining a specific Thing. (required)
     * @param xDNBAPICustomHeader2 Optional custom header described (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call thingsThingIdSpecialThingGetAsync(String xDNBAPITraceId, String xDNBAPICustomHeader, String thingId, String xDNBAPICustomHeader2, final ApiCallback<Thing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = thingsThingIdSpecialThingGetValidateBeforeCall(xDNBAPITraceId, xDNBAPICustomHeader, thingId, xDNBAPICustomHeader2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Thing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

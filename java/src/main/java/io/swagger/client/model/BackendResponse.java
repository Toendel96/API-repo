/*
 * FilipÂ´s API of Things
 * Some description here of the full API  GitHub Flavored Markdown can be used for rich text representation,     such as **bold**, *italic* and [links](https://swagger.io).           # Useful links for the tasks:  * **[REST Design Guidelines V4](https://confluence.tech.dnb.no/pages/viewpage.action?pageId=33488367)**  * **[SwaggerHub Way of Work](https://confluence.tech.dnb.no/display/KKO/SwaggerHub%3A+REST+API+Design+tool\\#SwaggerHub:RESTAPIDesigntool-WayofWork)**      
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Error information from the backend system consumed by the service providing this API. 
 */
@ApiModel(description = "Error information from the backend system consumed by the service providing this API. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-14T11:51:05.361Z")



public class BackendResponse {
  @SerializedName("endPointUrl")
  private String endPointUrl = null;

  @SerializedName("statusCode")
  private String statusCode = null;

  @SerializedName("message")
  private String message = null;

  public BackendResponse endPointUrl(String endPointUrl) {
    this.endPointUrl = endPointUrl;
    return this;
  }

   /**
   * URL of endpoint giving the error
   * @return endPointUrl
  **/
  @ApiModelProperty(value = "URL of endpoint giving the error")
  public String getEndPointUrl() {
    return endPointUrl;
  }

  public void setEndPointUrl(String endPointUrl) {
    this.endPointUrl = endPointUrl;
  }

  public BackendResponse statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Error code of backend system
   * @return statusCode
  **/
  @ApiModelProperty(value = "Error code of backend system")
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }

  public BackendResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Descriptive message to complemented the (sometime cryptic) backend error code.
   * @return message
  **/
  @ApiModelProperty(value = "Descriptive message to complemented the (sometime cryptic) backend error code.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendResponse backendResponse = (BackendResponse) o;
    return Objects.equals(this.endPointUrl, backendResponse.endPointUrl) &&
        Objects.equals(this.statusCode, backendResponse.statusCode) &&
        Objects.equals(this.message, backendResponse.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endPointUrl, statusCode, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendResponse {\n");
    
    sb.append("    endPointUrl: ").append(toIndentedString(endPointUrl)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

